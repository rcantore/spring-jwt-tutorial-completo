package com.ejemplo.jwtdemo.config;

import com.ejemplo.jwtdemo.entity.Role;
import com.ejemplo.jwtdemo.entity.User;
import com.ejemplo.jwtdemo.repository.RoleRepository;
import com.ejemplo.jwtdemo.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.util.Set;

/**
 * Inicializador de datos para la aplicaci√≥n JWT Demo
 * 
 * Esta clase implementa CommandLineRunner, lo que significa que su m√©todo run()
 * se ejecutar√° autom√°ticamente despu√©s de que Spring Boot termine de cargar
 * todos los componentes pero antes de que la aplicaci√≥n est√© completamente lista.
 * 
 * CONCEPTOS EDUCATIVOS CLAVE:
 * 
 * 1. COMMANDLINERUNNER:
 *    - Interface funcional que permite ejecutar c√≥digo al arranque
 *    - Ideal para tareas de inicializaci√≥n: poblar BD, verificar configuraciones, etc.
 *    - Se ejecuta despu√©s de que el ApplicationContext est√© completamente cargado
 *    - √ötil para datos de prueba, configuraciones iniciales, migraciones, etc.
 * 
 * 2. INYECCI√ìN DE DEPENDENCIAS:
 *    - @RequiredArgsConstructor (Lombok) genera constructor con dependencias final
 *    - Spring autom√°ticamente inyecta UserRepository, RoleRepository y PasswordEncoder
 *    - No necesitamos @Autowired gracias a la inyecci√≥n por constructor
 * 
 * 3. ENCRIPTACI√ìN DE CONTRASE√ëAS:
 *    - NUNCA almacenar contrase√±as en texto plano en la base de datos
 *    - BCryptPasswordEncoder utiliza el algoritmo bcrypt (muy seguro)
 *    - Cada vez que encriptas la misma contrase√±a, obtienes un hash diferente (salt)
 *    - Es computacionalmente costoso de descifrar (resistente a ataques de fuerza bruta)
 * 
 * 4. TRANSACCIONALIDAD:
 *    - Aunque no usamos @Transactional aqu√≠, cada operaci√≥n del repository es transaccional
 *    - Si alguna operaci√≥n falla, se puede hacer rollback autom√°ticamente
 *    - En un entorno real, marcar√≠as este m√©todo como @Transactional para mayor control
 * 
 * FLUJO DE EJECUCI√ìN:
 * 
 * 1. Spring Boot arranca y carga todos los componentes
 * 2. Se crea la base de datos H2 en memoria con las tablas necesarias
 * 3. Spring detecta esta clase como CommandLineRunner
 * 4. Inyecta autom√°ticamente las dependencias (repositories, passwordEncoder)
 * 5. Ejecuta el m√©todo run()
 * 6. Se crean los roles y usuarios de ejemplo
 * 7. La aplicaci√≥n queda lista para recibir peticiones
 * 
 * @author CebandoIdeas
 * @version 1.0
 */
@Component  // Marca esta clase como componente de Spring para ser detectada autom√°ticamente
@RequiredArgsConstructor  // Lombok genera constructor con todas las dependencias final
@Slf4j  // Lombok genera autom√°ticamente el logger: private static final Logger log = ...
public class DataInitializer implements CommandLineRunner {
    
    /*
     * INYECCI√ìN DE DEPENDENCIAS POR CONSTRUCTOR:
     * 
     * Spring autom√°ticamente inyectar√° estas dependencias cuando cree una instancia
     * de DataInitializer. Esto es m√°s seguro que @Autowired en campos porque:
     * 
     * 1. Garantiza que las dependencias no sean null
     * 2. Permite hacer los campos final (inmutables)
     * 3. Facilita las pruebas unitarias (puedes pasar mocks en el constructor)
     * 4. Es la pr√°ctica recomendada por el equipo de Spring
     */
    
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;  // BCryptPasswordEncoder inyectado desde SecurityConfig
    
    /**
     * M√©todo que se ejecuta autom√°ticamente al arranque de la aplicaci√≥n
     * 
     * ORDEN DE EJECUCI√ìN:
     * 1. Se crean las tablas en la base de datos (por Hibernate DDL)
     * 2. Se ejecuta este m√©todo
     * 3. Se puebla la base de datos con datos iniciales
     * 4. La aplicaci√≥n queda lista para recibir peticiones
     * 
     * @param args Argumentos de l√≠nea de comandos (raramente utilizados en CommandLineRunner)
     * @throws Exception Si ocurre alg√∫n error durante la inicializaci√≥n
     */
    @Override
    public void run(String... args) throws Exception {
        log.info("üöÄ Iniciando poblado de datos iniciales...");
        
        /*
         * VERIFICACI√ìN DE ESTADO:
         * 
         * Verificamos si ya existen datos para evitar duplicados.
         * Esto es especialmente √∫til en entornos donde la aplicaci√≥n
         * se reinicia frecuentemente durante el desarrollo.
         */
        if (roleRepository.count() > 0) {
            log.info("‚úÖ Los datos ya existen, saltando inicializaci√≥n");
            return;
        }
        
        // Inicializar roles y usuarios
        inicializarRoles();
        inicializarUsuarios();
        
        log.info("‚úÖ Datos iniciales creados exitosamente");
        log.info("üìä Resumen:");
        log.info("   - Roles creados: {}", roleRepository.count());
        log.info("   - Usuarios creados: {}", userRepository.count());
    }
    
    /**
     * Crea los roles b√°sicos del sistema
     * 
     * ROLES EN UN SISTEMA JWT:
     * 
     * - USER: Usuario b√°sico con permisos limitados
     * - ADMIN: Administrador con permisos completos
     * - MODERATOR: Rol intermedio (opcional, para sistemas m√°s complejos)
     * 
     * PATR√ìN DE NOMENCLATURA:
     * - Prefijo "ROLE_" es una convenci√≥n de Spring Security
     * - Aunque no es obligatorio, es altamente recomendado
     * - Facilita la configuraci√≥n de seguridad y autorizaci√≥n
     */
    private void inicializarRoles() {
        log.info("üìù Creando roles del sistema...");
        
        /*
         * CREACI√ìN DE ROLES:
         * 
         * Creamos los roles b√°sicos que utilizar√° nuestra aplicaci√≥n.
         * En un sistema real, podr√≠as tener roles m√°s espec√≠ficos como:
         * - ROLE_CUSTOMER
         * - ROLE_EMPLOYEE
         * - ROLE_MANAGER
         * - ROLE_SUPER_ADMIN
         */
        
        Role userRole = new Role("ROLE_USER");
        Role adminRole = new Role("ROLE_ADMIN");
        
        // Guardar en la base de datos
        roleRepository.save(userRole);
        roleRepository.save(adminRole);
        
        log.info("‚úÖ Roles creados: ROLE_USER, ROLE_ADMIN");
        
        /*
         * NOTA EDUCATIVA:
         * 
         * ¬øPor qu√© prefijo "ROLE_"?
         * 
         * Spring Security espera este prefijo por defecto al usar:
         * - @PreAuthorize("hasRole('USER')")  // Spring agrega "ROLE_" autom√°ticamente
         * - @PreAuthorize("hasAuthority('ROLE_USER')")  // Debes especificar el prefijo completo
         * 
         * Tambi√©n facilita la configuraci√≥n en SecurityConfig:
         * - .requestMatchers("/admin/**").hasRole("ADMIN")  // Sin prefijo
         * - .requestMatchers("/admin/**").hasAuthority("ROLE_ADMIN")  // Con prefijo
         */
    }
    
    /**
     * Crea usuarios de ejemplo con diferentes roles para pruebas
     * 
     * USUARIOS DE PRUEBA:
     * 
     * 1. admin/admin123 - Administrador del sistema
     * 2. user/user123 - Usuario b√°sico
     * 3. juan/password123 - Usuario adicional para pruebas
     * 
     * SEGURIDAD DE CONTRASE√ëAS:
     * 
     * - Todas las contrase√±as se encriptan con BCrypt antes de almacenar
     * - BCrypt incluye autom√°ticamente un "salt" √∫nico para cada contrase√±a
     * - Es computacionalmente costoso, lo que dificulta ataques de fuerza bruta
     * - Cada encriptaci√≥n de la misma contrase√±a produce un hash diferente
     */
    private void inicializarUsuarios() {
        log.info("üë• Creando usuarios de ejemplo...");
        
        // Recuperar roles de la base de datos
        Role userRole = roleRepository.findByName("ROLE_USER")
            .orElseThrow(() -> new RuntimeException("Role USER no encontrado"));
        Role adminRole = roleRepository.findByName("ROLE_ADMIN")
            .orElseThrow(() -> new RuntimeException("Role ADMIN no encontrado"));
        
        /*
         * USUARIO ADMINISTRADOR:
         * 
         * Credenciales: admin / admin123
         * Roles: ADMIN, USER (un admin tambi√©n puede ser user)
         * 
         * En muchos sistemas, los administradores tambi√©n tienen permisos de usuario
         * b√°sico, por eso asignamos ambos roles.
         */
        if (!userRepository.findByUsername("admin").isPresent()) {
            User admin = new User();
            admin.setUsername("admin");
            admin.setEmail("admin@ejemplo.com");
            // Encriptar contrase√±a antes de guardar
            admin.setPassword(passwordEncoder.encode("admin123"));
            admin.setEnabled(true);
            // Asignar ambos roles al administrador
            admin.setRoles(Set.of(adminRole, userRole));
            
            userRepository.save(admin);
            log.info("‚úÖ Usuario administrador creado: admin / admin123");
            
            /*
             * DEMOSTRACI√ìN DE ENCRIPTACI√ìN:
             * 
             * Si ejecutas esto varias veces, ver√°s que el hash es diferente cada vez:
             */
            log.debug("üîê Hash de contrase√±a admin: {}", admin.getPassword());
        }
        
        /*
         * USUARIO B√ÅSICO:
         * 
         * Credenciales: user / user123
         * Roles: USER √∫nicamente
         */
        if (!userRepository.findByUsername("user").isPresent()) {
            User user = new User();
            user.setUsername("user");
            user.setEmail("user@ejemplo.com");
            user.setPassword(passwordEncoder.encode("user123"));
            user.setEnabled(true);
            user.setRoles(Set.of(userRole));
            
            userRepository.save(user);
            log.info("‚úÖ Usuario b√°sico creado: user / user123");
        }
        
        /*
         * USUARIO ADICIONAL PARA PRUEBAS:
         * 
         * Credenciales: juan / password123
         * Roles: USER √∫nicamente
         * 
         * Es √∫til tener varios usuarios para probar funcionalidades como:
         * - Listado de usuarios
         * - B√∫squedas
         * - Paginaci√≥n
         * - etc.
         */
        if (!userRepository.findByUsername("juan").isPresent()) {
            User juan = new User();
            juan.setUsername("juan");
            juan.setEmail("juan.perez@ejemplo.com");
            juan.setPassword(passwordEncoder.encode("password123"));
            juan.setEnabled(true);
            juan.setRoles(Set.of(userRole));
            
            userRepository.save(juan);
            log.info("‚úÖ Usuario de prueba creado: juan / password123");
        }
        
        /*
         * USUARIO DESHABILITADO PARA PRUEBAS:
         * 
         * Este usuario est√° deshabilitado para probar el manejo de cuentas inactivas
         * en el proceso de autenticaci√≥n.
         */
        if (!userRepository.findByUsername("disabled").isPresent()) {
            User disabledUser = new User();
            disabledUser.setUsername("disabled");
            disabledUser.setEmail("disabled@ejemplo.com");
            disabledUser.setPassword(passwordEncoder.encode("disabled123"));
            disabledUser.setEnabled(false);  // Usuario deshabilitado
            disabledUser.setRoles(Set.of(userRole));
            
            userRepository.save(disabledUser);
            log.info("‚úÖ Usuario deshabilitado creado: disabled / disabled123 (enabled=false)");
        }
        
        log.info("üë• Usuarios creados exitosamente");
        
        /*
         * MOSTRAR INFORMACI√ìN √öTIL PARA PRUEBAS:
         */
        log.info("");
        log.info("üîë CREDENCIALES PARA PRUEBAS:");
        log.info("   üë®‚Äçüíº Administrador: admin / admin123");
        log.info("   üë§ Usuario b√°sico: user / user123");
        log.info("   üë§ Usuario de prueba: juan / password123");
        log.info("   üö´ Usuario deshabilitado: disabled / disabled123");
        log.info("");
        log.info("üåê Endpoints de prueba:");
        log.info("   POST /api/auth/login - Iniciar sesi√≥n");
        log.info("   POST /api/auth/register - Registrar nuevo usuario");
        log.info("   GET /api/users - Listar usuarios (requiere ADMIN)");
        log.info("   GET /api/protected/admin - Endpoint solo para administradores");
        log.info("   GET /api/protected/user - Endpoint para usuarios autenticados");
        log.info("   GET /api/public/info - Endpoint p√∫blico (sin autenticaci√≥n)");
        log.info("");
    }
    
    /*
     * EJERCICIOS PROPUESTOS PARA ESTUDIANTES:
     * 
     * 1. B√ÅSICO: Agrega un nuevo rol "ROLE_MODERATOR" y crea un usuario con ese rol
     * 
     * 2. INTERMEDIO: Modifica el c√≥digo para leer las credenciales desde application.properties
     *    usando @Value o @ConfigurationProperties
     * 
     * 3. AVANZADO: Implementa un sistema de carga de datos desde un archivo JSON o CSV
     * 
     * 4. DESAF√çO: Agrega validaciones para asegurar que los emails sean √∫nicos y v√°lidos
     * 
     * 5. PROFESIONAL: Implementa un mecanismo para actualizar datos existentes sin duplicar
     *    informaci√≥n (upsert pattern)
     */
}